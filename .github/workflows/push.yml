name: 'GitHub Actions'
'on':
    - push

concurrency: 'ci-${{ github.ref }}'
env:
    APP_IMAGE: keboola/ex-azure-cost-management
    KBC_DEVELOPERPORTAL_VENDOR: keboola
    KBC_DEVELOPERPORTAL_APP: keboola.ex-azure-cost-management
    KBC_DEVELOPERPORTAL_USERNAME: ${{ vars.KBC_DEVELOPERPORTAL_USERNAME }}
    KBC_DEVELOPERPORTAL_PASSWORD: '${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}'
    KBC_DATA_TYPE_SUPPORT: "none"

    DOCKERHUB_USER: '${{ secrets.DOCKERHUB_USER }}'
    DOCKERHUB_TOKEN: '${{ secrets.DOCKERHUB_TOKEN }}'

jobs:
    build:
        runs-on: ubuntu-latest
        outputs:
            app_image_tag: '${{ steps.tag.outputs.app_image_tag }}'
            is_semantic_tag: '${{ steps.tag.outputs.is_semantic_tag }}'
        steps:
            -
                name: 'Check out the repo'
                uses: actions/checkout@v4
            -
                name: 'Print Docker version'
                run: 'docker -v'
            -
                name: 'Docker login'
                if: env.DOCKERHUB_TOKEN
                run: 'docker login --username "$DOCKERHUB_USER" --password "$DOCKERHUB_TOKEN"'
            -
                name: 'Build image'
                run: 'docker build -t $APP_IMAGE .'
            -
                name: 'Set image tag'
                id: tag
                run: |
                    TAG="${GITHUB_REF##*/}"
                    IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
                    echo "Tag = '$TAG', is semantic tag = '$IS_SEMANTIC_TAG'"
                    echo "app_image_tag=$TAG" >> $GITHUB_OUTPUT
                    echo "is_semantic_tag=$IS_SEMANTIC_TAG" >> $GITHUB_OUTPUT
            -
                name: 'Push image to ECR'
                uses: keboola/action-push-to-ecr@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ steps.tag.outputs.app_image_tag }}'
                    push_latest: '${{ steps.tag.outputs.is_semantic_tag }}'
                    source_image: '${{ env.APP_IMAGE}}'
    tests:
        needs: build
        runs-on: ubuntu-latest
        steps:
            -
                name: 'Check out the repo'
                uses: actions/checkout@v4
            -
                name: 'Pull image from ECR'
                uses: keboola/action-pull-from-ecr@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ needs.build.outputs.app_image_tag }}'
                    target_image: '${{ env.APP_IMAGE}}'
                    tag_as_latest: true
            -
                name: 'Run unit tests'
                run: | 
                    docker run \
                    -e KBC_DATA_TYPE_SUPPORT \
                    -e OAUTH_APP_NAME="${{ secrets.OAUTH_APP_NAME }}" \
                    -e OAUTH_APP_ID="${{ secrets.OAUTH_APP_ID }}" \
                    -e OAUTH_APP_SECRET="${{ secrets.OAUTH_APP_SECRET }}" \
                    -e OAUTH_ACCESS_TOKEN="${{ secrets.OAUTH_ACCESS_TOKEN }}" \
                    -e OAUTH_REFRESH_TOKEN="${{ secrets.OAUTH_REFRESH_TOKEN }}" \
                    -e SERVICE_PRINCIPAL_TENANT="${{ secrets.SERVICE_PRINCIPAL_TENANT }}" \
                    -e SERVICE_PRINCIPAL_USERNAME="${{ secrets.SERVICE_PRINCIPAL_USERNAME }}" \
                    -e SERVICE_PRINCIPAL_PASSWORD="${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}" \
                    -e TEST_SUBSCRIPTION_ID="${{ secrets.TEST_SUBSCRIPTION_ID }}" \
                    ${{env.APP_IMAGE}} composer tests-phpunit
            -
                name: 'Run functional tests with rate limiting delays'
                run: |
                    # Get list of test directories
                    TEST_DIRS=$(find tests/functional -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | sort)
                    
                    PAUSE_SECONDS=15
                    FAILED_TESTS=()
                    
                    echo "Running functional tests sequentially with ${PAUSE_SECONDS}s pause between tests..."
                    
                    for test_dir in $TEST_DIRS; do
                      echo "=== Running test: ${test_dir} ==="
                      
                      docker run --rm \
                        -e KBC_DATA_TYPE_SUPPORT \
                        -e OAUTH_APP_NAME="${{ secrets.OAUTH_APP_NAME }}" \
                        -e OAUTH_APP_ID="${{ secrets.OAUTH_APP_ID }}" \
                        -e OAUTH_APP_SECRET="${{ secrets.OAUTH_APP_SECRET }}" \
                        -e OAUTH_ACCESS_TOKEN="${{ secrets.OAUTH_ACCESS_TOKEN }}" \
                        -e OAUTH_REFRESH_TOKEN="${{ secrets.OAUTH_REFRESH_TOKEN }}" \
                        -e SERVICE_PRINCIPAL_TENANT="${{ secrets.SERVICE_PRINCIPAL_TENANT }}" \
                        -e SERVICE_PRINCIPAL_USERNAME="${{ secrets.SERVICE_PRINCIPAL_USERNAME }}" \
                        -e SERVICE_PRINCIPAL_PASSWORD="${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}" \
                        -e TEST_SUBSCRIPTION_ID="${{ secrets.TEST_SUBSCRIPTION_ID }}" \
                        ${{env.APP_IMAGE}} vendor/bin/phpunit tests/functional --filter="${test_dir}" || FAILED_TESTS+=("${test_dir}")
                      
                      echo "=== Completed: ${test_dir}. Sleeping ${PAUSE_SECONDS}s to avoid rate limiting... ==="
                      sleep ${PAUSE_SECONDS}
                    done
                    
                    if [ ${#FAILED_TESTS[@]} -gt 0 ]; then
                      echo "Failed tests: ${FAILED_TESTS[@]}"
                      exit 1
                    fi
                    
                    echo "All functional tests passed!"

    deploy:
        needs:
            - build
            - tests
        runs-on: ubuntu-latest
        if: 'startsWith(github.ref, ''refs/tags/'') && needs.build.outputs.is_semantic_tag == ''true'''
        steps:
            -
                name: 'Set tag in the Developer Portal'
                uses: keboola/action-set-tag-developer-portal@master
                with:
                    vendor: '${{ env.KBC_DEVELOPERPORTAL_VENDOR }}'
                    app_id: '${{ env.KBC_DEVELOPERPORTAL_APP }}'
                    username: '${{ env.KBC_DEVELOPERPORTAL_USERNAME }}'
                    password: '${{ env.KBC_DEVELOPERPORTAL_PASSWORD }}'
                    tag: '${{ needs.build.outputs.app_image_tag }}'

